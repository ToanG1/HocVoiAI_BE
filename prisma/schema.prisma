generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model User {
  uuid      String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  previlege       Privilege[]
  questions       Question[]
  questionReplies QuestionReply[]

  userInfo  UserInfo?
  followers Follow[]  @relation("Followers")
  following Follow[]  @relation("Following")
}

model UserInfo {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [uuid])
  userId     String   @unique
  avatar     String
  about      String
  socialLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Follow {
  id          Int      @id @default(autoincrement())
  followDate  DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [uuid])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [uuid])
  followingId String
}

// User to Roadmap Privilege
model Privilege {
  user          User           @relation(fields: [userId], references: [uuid])
  userId        String
  roadmapDetail RoadmapDetails @relation(fields: [rmdId], references: [id])
  rmdId         String
  type          String
  progress      Float
  createdAt     DateTime

  @@id([userId, rmdId])
}

// Roadmap
// model Content {
//   id          Int    @id @default(autoincrement())
//   name        String
//   description String
//   topic       Topic  @relation(fields: [topicId], references: [id])
//   topicId     Int
// }

// model Topic {
//   id        Int       @id @default(autoincrement())
//   name      String
//   contents  Content[]
//   roadmap   Roadmap   @relation(fields: [roadmapId], references: [id])
//   roadmapId Int
// }

model Roadmap {
  id        Int            @id @default(autoincrement())
  title     String
  topics    String
  details   RoadmapDetails @relation(fields: [detailsId], references: [id])
  detailsId String         @unique
  createdAt DateTime
  updatedAt DateTime
}

// Roadmap details

model Tag {
  id        Int              @id @default(autoincrement())
  name      String
  roadmaps  RoadmapDetails[]
  questions Question[]
}

model Category {
  id       Int              @id @default(autoincrement())
  name     String
  roadmaps RoadmapDetails[]
  question Question[]
}

model RoadmapDetails {
  id          String      @id @default(uuid())
  title       String
  avatar      String
  rating      Int
  description String
  level       String
  duration    String
  topics      Int
  tags        Tag[]
  language    String
  isPublic    Boolean
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  roadmap     Roadmap?
  privileges  Privilege[]
  type        Int
  createdAt   DateTime
  updateAt    DateTime
}

model Question {
  id        Int             @id @default(autoincrement())
  title     String
  content   String
  user      User            @relation(fields: [userId], references: [uuid])
  userId    String
  tags      Tag[]
  category  Category?       @relation(fields: [cateId], references: [id])
  cateId    Int?
  replies   QuestionReply[]
  createdAt DateTime
  updateAt  DateTime
}

model QuestionReply {
  id         Int      @id @default(autoincrement())
  content    String
  user       User     @relation(fields: [userId], references: [uuid])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime
  updateAt   DateTime
}
