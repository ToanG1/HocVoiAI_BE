generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model User {
  uuid        String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  isActivated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  previlege       Privilege[]
  questions       Question[]
  questionReplies QuestionReply[]
  comments        QuestionComment[]

  userInfo  UserInfo?
  followers Follow[]  @relation("Followers")
  following Follow[]  @relation("Following")
  token     Token[]
  goal      Goal[]
  ratings   Rating[]
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@unique([token, type])
}

model UserInfo {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [uuid])
  userId     String   @unique
  avatar     String
  about      String
  socialLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Follow {
  id          Int      @id @default(autoincrement())
  followDate  DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [uuid])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [uuid])
  followingId String
}

// User to Roadmap Privilege
model Privilege {
  user          User           @relation(fields: [userId], references: [uuid])
  userId        String
  roadmapDetail RoadmapDetails @relation(fields: [rmdId], references: [id])
  rmdId         String
  type          String
  createdAt     DateTime

  @@id([userId, rmdId])
}

model Roadmap {
  id        Int            @id @default(autoincrement())
  title     String
  topics    String
  details   RoadmapDetails @relation(fields: [detailsId], references: [id])
  detailsId String         @unique
  createdAt DateTime
  updatedAt DateTime
}

// Roadmap details

model Tag {
  id        Int              @id @default(autoincrement())
  name      String
  isActived Boolean          @default(false)
  roadmaps  RoadmapDetails[]
  questions Question[]
}

model Category {
  id        Int              @id @default(autoincrement())
  name      String
  isActived Boolean          @default(false)
  roadmaps  RoadmapDetails[]
  question  Question[]
}

model RoadmapDetails {
  id          String      @id @default(uuid())
  title       String
  avatar      String
  rating      Int
  ratings     Rating[]
  description String
  level       String
  duration    String
  topics      Int
  tags        Tag[]
  language    String
  isPublic    Boolean
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  roadmap     Roadmap?
  privileges  Privilege[]
  type        Int
  createdAt   DateTime
  updateAt    DateTime

  goalBranch GoalBranch[]
}

model Rating {
  id      Int             @id @default(autoincrement())
  user    User            @relation(fields: [userId], references: [uuid])
  userId  String
  roadmap RoadmapDetails? @relation(fields: [rmId], references: [id])
  rmId    String?

  star      Int
  content   String
  type      String
  createdAt DateTime
  updateAt  DateTime

  @@unique([userId, rmId, type])
}

model Question {
  id        Int               @id @default(autoincrement())
  title     String
  content   String
  user      User              @relation(fields: [userId], references: [uuid])
  userId    String
  tags      Tag[]
  category  Category?         @relation(fields: [cateId], references: [id])
  cateId    Int?
  replies   QuestionReply[]
  comments  QuestionComment[]
  createdAt DateTime
  updateAt  DateTime
}

model QuestionReply {
  id         Int      @id @default(autoincrement())
  content    String
  user       User     @relation(fields: [userId], references: [uuid])
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  createdAt  DateTime
  updateAt   DateTime

  questionComments QuestionComment[]
}

model QuestionComment {
  id              Int            @id @default(autoincrement())
  content         String
  user            User           @relation(fields: [userId], references: [uuid])
  userId          String
  question        Question?      @relation(fields: [questionId], references: [id])
  questionId      Int
  questionReply   QuestionReply? @relation(fields: [questionReplyId], references: [id], onDelete: Cascade)
  questionReplyId Int
  createdAt       DateTime
  updateAt        DateTime
}

model Goal {
  id       Int      @id @default(autoincrement())
  name     String
  user     User     @relation(fields: [userId], references: [uuid])
  userId   String
  createAt DateTime
  updateAt DateTime

  goalBranch GoalBranch[]
}

model GoalBranch {
  id            Int            @id @default(autoincrement())
  roamapDetails RoadmapDetails @relation(fields: [rmId], references: [id])
  rmId          String
  goal          Goal           @relation(fields: [goalId], references: [id])
  goalId        Int

  startDate DateTime
  endDate   DateTime
  notes     Note[]
}

model Note {
  id           Int        @id @default(autoincrement())
  name         String
  content      String
  goalBranch   GoalBranch @relation(fields: [goalBranchId], references: [id])
  goalBranchId Int

  createdAt DateTime
  updateAt  DateTime
}
